{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","passageRef","useRef","questionRef","useState","answer","setAnswer","model","setModel","loadModel","a","qna","loadedModel","console","log","useEffect","answerQuestion","e","which","passage","current","value","question","findAnswers","answers","className","type","color","height","width","ref","rows","cols","onKeyPress","size","map","ans","idx","text","Math","floor","score","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0ZAqFeA,MAzEf,WAIE,IAAMC,EAAaC,iBAAO,MACpBC,EAAcD,iBAAO,MAC3B,EAA4BE,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAIMC,EAAS,uCAAG,4BAAAC,EAAA,sEACUC,MADV,OACVC,EADU,OAEhBJ,EAASI,GACTC,QAAQC,IAAI,gBAHI,2CAAH,qDAMfC,qBAAU,WAAON,MAAc,IAI/B,IAAMO,EAAc,uCAAG,WAAOC,GAAP,mBAAAP,EAAA,yDACL,KAAZO,EAAEC,OAA0B,OAAVX,EADD,uBAEnBM,QAAQC,IAAI,sBACNK,EAAUlB,EAAWmB,QAAQC,MAC7BC,EAAWnB,EAAYiB,QAAQC,MAJlB,SAMGd,EAAMgB,YAAYD,EAAUH,GAN/B,OAMbK,EANa,OAOnBlB,EAAUkB,GACVX,QAAQC,IAAIU,GARO,2CAAH,sDAapB,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAGa,MAATlB,EACA,gCACE,gDACA,cAAC,IAAD,CACEmB,KAAK,OACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,SAIX,eAAC,WAAD,WACE,0CACA,0BAAUC,IAAK7B,EAAY8B,KAAK,KAAKC,KAAK,QAC1C,uBAEA,iDACA,uBAAOF,IAAK3B,EAAa8B,WAAYjB,EAAgBkB,KAAK,OAC1D,uBAEA,0CACE7B,EACAA,EAAO8B,KAAI,SAACC,EAAKC,GAAN,OACT,8BAAK,wCAAWA,EAAI,EAAf,MAAqBD,EAAIE,KAAzB,YAAwCC,KAAKC,MAAMJ,EAAIK,MAAM,KAAK,IAAlE,YACP,WC/DCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6a70e96b.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\nimport './App.css';\n\n// Import dependencies\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as qna from \"@tensorflow-models/qna\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport {Fragment} from \"react\";\n\n\nfunction App() {\n\n  // Setup references ans state hooks\n\n  const passageRef = useRef(null);\n  const questionRef = useRef(null);\n  const [answer, setAnswer] = useState();\n  const [model, setModel] = useState(null);\n\n  // Load Tensorflow model\n\n  const loadModel = async () => {\n    const loadedModel = await qna.load();\n    setModel(loadedModel);\n    console.log('Model Loaded');\n  };\n\n  useEffect(() => {loadModel()}, []);\n\n  // Handle Questions\n\n  const answerQuestion = async (e) => {\n    if (e.which === 13 && model !== null){\n      console.log('Question submitted');\n      const passage = passageRef.current.value;\n      const question = questionRef.current.value;\n\n      const answers = await model.findAnswers(question, passage);\n      setAnswer(answers);\n      console.log(answers);\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* Setup input, question and result area */}\n        {\n          model == null ?\n          <div>\n            <div>Model Loading</div>\n            <Loader \n              type=\"Puff\"\n              color=\"#008FFF\"\n              height={100}\n              width={100}\n            />\n          </div>\n          :\n          <Fragment>\n            <div>Passage</div>\n            <textarea ref={passageRef} rows=\"25\" cols=\"100\"></textarea>\n            <br/>\n\n            <div>Ask a question</div>\n            <input ref={questionRef} onKeyPress={answerQuestion} size=\"80\"/>\n            <br/>\n\n            <div>Answers</div>\n            { answer ?\n              answer.map((ans, idx) => \n                <div><b>Answer {idx+1} - {ans.text} - Score({Math.floor(ans.score+100)/100})</b></div>)\n            : \"\"\n            }\n          </Fragment>\n        }\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}